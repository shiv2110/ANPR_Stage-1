# # -*- coding: utf-8 -*-
# """ANPR.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1KPih7z3xRJuOimmiLbohAs3vHHJy7oA4
# """

# from google.colab import drive
# drive.mount('/content/gdrive')

# !unzip gdrive/My\ Drive/characters/dataset_characters.zip

# !ls

# import tensorflow as tf



# !pip install -q -U keras-tuner

import keras_tuner as kt

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from tensorflow.keras.models import model_from_json
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
#import matplotlib.gridspec as gridspec
import glob
import numpy as np

import os
dataset_paths = glob.glob("dataset_characters/**/*.jpg")

cols = 3
rows = 3

np.random.seed(200)
rand = np.random.randint(0,len(dataset_paths),size=(cols*rows))

plt.figure(figsize = (10, 8))
for i in range(cols*rows):
    plt.subplot(rows, cols, i+1)
    image = load_img(dataset_paths[rand[i]])
    label = dataset_paths[rand[i]].split(os.path.sep)[-2]
    plt.title(label)
    plt.axis(False)
    plt.imshow(image)

X = []
labels = []

for image_path in dataset_paths:
  label = image_path.split(os.path.sep)[-2]
  image = load_img(image_path,target_size = (80, 80))
  image = img_to_array(image)
  X.append(image)
  labels.append(label)

X = np.array(X,dtype="float32")
labels = np.array(labels)

print("{0} images with {1} classes".format(len(X), len(set(labels))))


# perform one-hot encoding on the labels
le = LabelEncoder()
le.fit(labels)
labels = le.transform(labels)
y = to_categorical(labels)

# save label file so we can use in another script
np.save('classes.npy', le.classes_)

(x_train, x_test, y_train, y_test) = train_test_split(X, y, test_size = 0.10, stratify = y, random_state = 24)

print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

image_gen = ImageDataGenerator(rotation_range = 10,
                              width_shift_range = 0.1,
                              height_shift_range = 0.1,
                              shear_range = 0.1,
                              zoom_range = 0.1,
                              fill_mode = "nearest"
                              )

# tf.keras.applications.mobilenet_v2.preprocess_input(x_train)
# tf.keras.applications.mobilenet_v2.preprocess_input(x_test)

def create_model(hp, decay = 1e-4/25, training = True, output_shape = y.shape[1]):
  base = MobileNetV2(weights = 'imagenet',
                          include_top = False,
                          input_tensor = Input(shape = (80, 80, 3))
                          )
  top = base.output
  top = AveragePooling2D(pool_size = (3, 3))(top)
  top = Flatten(name = "flatten")(top)

  hp_units = hp.Int('units', min_value=64, max_value=256, step=32)
  # model.add(keras.layers.Dense(units=hp_units, activation='relu'))

  top = Dense(units=hp_units, activation='relu')(top)
  top = Dropout(0.5)(top)
  top = Dense(output_shape, activation = "softmax")(top)
    
  model = Model(inputs = base.input, outputs = top)

  hp_learning_rate = hp.Choice('learning_rate', values=[1e-4, 1e-5])
    
  if training:
      for layer in base.layers:
          layer.trainable = True
      optimizer = Adam(learning_rate=hp_learning_rate, decay = decay)
      model.compile(loss = "categorical_crossentropy", optimizer = optimizer, metrics = ["accuracy"])    
        
  return model

tuner = kt.Hyperband(create_model,
                     objective='val_accuracy',
                     max_epochs=10,
                     factor=3)
                    #  directory='my_dir',
                    #  project_name='intro_to_kt')

# decay = 1e-4/25
EPOCHS = 30
# model = create_model(decay = lr/EPOCHS, training = True)

modelp_es = EarlyStopping(monitor = 'val_loss', patience = 5, verbose = 0)

# modelp_checkpointer = [
#                 EarlyStopping(monitor = 'val_loss', patience = 5, verbose = 0),
#                 ModelCheckpoint(filepath = "License_char_plate_recog.h5", verbose = 1, save_weights_only = True)
#                 ]


tuner.search(x_train, y_train, epochs=EPOCHS, validation_data=(x_test, y_test), callbacks=[modelp_es])

# Get the optimal hyperparameters
best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]

print(f""" The optimal number of units is : {best_hps.get('units')} and the optimal learning rate for the optimizer
is : {best_hps.get('learning_rate')} """)

model = tuner.hypermodel.build(best_hps)
history = model.fit(x_train, y_train, epochs=30, validation_data=(x_test, y_test))

val_acc_per_epoch = history.history['val_accuracy']
best_epoch = val_acc_per_epoch.index(max(val_acc_per_epoch)) + 1
print('Best epoch: %d' % (best_epoch,))

hypermodel = tuner.hypermodel.build(best_hps)
modelp_checkpointer = ModelCheckpoint(filepath = "License_char_plate_recog.h5", verbose = 1, save_weights_only = True)
# Retrain the model
hypermodel.fit(x_train, y_train, epochs=best_epoch, validation_data=(x_test, y_test), callbacks=modelp_checkpointer)

eval_result = hypermodel.evaluate(x_test, y_test)
print("[test loss, test accuracy]:", eval_result)



f = open("MobileNet_V2_char_recog.json", "w")
f.write(model.to_json())
f.close()

